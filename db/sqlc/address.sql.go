// Code generated by sqlc. DO NOT EDIT.
// source: address.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const deleteAddressFromAccount = `-- name: DeleteAddressFromAccount :exec
DELETE FROM address
 WHERE account_uuid = $1
`

func (q *Queries) DeleteAddressFromAccount(ctx context.Context, accountUuid uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteAddressFromAccountStmt, deleteAddressFromAccount, accountUuid)
	return err
}

const getAddressByAccount = `-- name: GetAddressByAccount :one
SELECT address_uuid, name, street, city, state, zipcode, account_uuid, created_date, updated_date, created_by, updated_by 
  FROM address
 WHERE account_uuid = $1
`

func (q *Queries) GetAddressByAccount(ctx context.Context, accountUuid uuid.UUID) (Address, error) {
	row := q.queryRow(ctx, q.getAddressByAccountStmt, getAddressByAccount, accountUuid)
	var i Address
	err := row.Scan(
		&i.AddressUuid,
		&i.Name,
		&i.Street,
		&i.City,
		&i.State,
		&i.Zipcode,
		&i.AccountUuid,
		&i.CreatedDate,
		&i.UpdatedDate,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getAddressById = `-- name: GetAddressById :one
SELECT address_uuid, name, street, city, state, zipcode, account_uuid, created_date, updated_date, created_by, updated_by 
  FROM address
 WHERE address_uuid = $1
`

func (q *Queries) GetAddressById(ctx context.Context, addressUuid uuid.UUID) (Address, error) {
	row := q.queryRow(ctx, q.getAddressByIdStmt, getAddressById, addressUuid)
	var i Address
	err := row.Scan(
		&i.AddressUuid,
		&i.Name,
		&i.Street,
		&i.City,
		&i.State,
		&i.Zipcode,
		&i.AccountUuid,
		&i.CreatedDate,
		&i.UpdatedDate,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
