// Code generated by sqlc. DO NOT EDIT.
// source: address.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO address (name, street, city, state,     zipcode, account_uuid)
             VALUES ($1,   $2,     $3,   $4::state, $5,      $6)
RETURNING address_uuid, name, street, city, state, zipcode, account_uuid, created_date, updated_date, created_by, updated_by
`

type CreateAddressParams struct {
	Name        string    `json:"name"`
	Street      string    `json:"street"`
	City        string    `json:"city"`
	State       State     `json:"state"`
	Zipcode     string    `json:"zipcode"`
	AccountUuid uuid.UUID `json:"account_uuid"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddress,
		arg.Name,
		arg.Street,
		arg.City,
		arg.State,
		arg.Zipcode,
		arg.AccountUuid,
	)
	var i Address
	err := row.Scan(
		&i.AddressUuid,
		&i.Name,
		&i.Street,
		&i.City,
		&i.State,
		&i.Zipcode,
		&i.AccountUuid,
		&i.CreatedDate,
		&i.UpdatedDate,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteAddressFromAccount = `-- name: DeleteAddressFromAccount :exec
DELETE FROM address
 WHERE account_uuid = $1
`

func (q *Queries) DeleteAddressFromAccount(ctx context.Context, accountUuid uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAddressFromAccount, accountUuid)
	return err
}

const getAddressByAccount = `-- name: GetAddressByAccount :one
SELECT address_uuid, name, street, city, state, zipcode, account_uuid, created_date, updated_date, created_by, updated_by 
  FROM address
 WHERE account_uuid = $1
`

func (q *Queries) GetAddressByAccount(ctx context.Context, accountUuid uuid.UUID) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddressByAccount, accountUuid)
	var i Address
	err := row.Scan(
		&i.AddressUuid,
		&i.Name,
		&i.Street,
		&i.City,
		&i.State,
		&i.Zipcode,
		&i.AccountUuid,
		&i.CreatedDate,
		&i.UpdatedDate,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getAddressById = `-- name: GetAddressById :one
SELECT address_uuid, name, street, city, state, zipcode, account_uuid, created_date, updated_date, created_by, updated_by 
  FROM address
 WHERE address_uuid = $1
`

func (q *Queries) GetAddressById(ctx context.Context, addressUuid uuid.UUID) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddressById, addressUuid)
	var i Address
	err := row.Scan(
		&i.AddressUuid,
		&i.Name,
		&i.Street,
		&i.City,
		&i.State,
		&i.Zipcode,
		&i.AccountUuid,
		&i.CreatedDate,
		&i.UpdatedDate,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE address 
   SET name = $1, 
       street = $2, 
       city = $3, 
       state = $4::state,     
       zipcode = $5,
       updated_date = now()
 WHERE address_uuid = $6
RETURNING address_uuid, name, street, city, state, zipcode, account_uuid, created_date, updated_date, created_by, updated_by
`

type UpdateAddressParams struct {
	Name        string    `json:"name"`
	Street      string    `json:"street"`
	City        string    `json:"city"`
	State       State     `json:"state"`
	Zipcode     string    `json:"zipcode"`
	AddressUuid uuid.UUID `json:"address_uuid"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, updateAddress,
		arg.Name,
		arg.Street,
		arg.City,
		arg.State,
		arg.Zipcode,
		arg.AddressUuid,
	)
	var i Address
	err := row.Scan(
		&i.AddressUuid,
		&i.Name,
		&i.Street,
		&i.City,
		&i.State,
		&i.Zipcode,
		&i.AccountUuid,
		&i.CreatedDate,
		&i.UpdatedDate,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
