// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"database/sql"
	"fmt"

	"github.com/google/uuid"
)

type State string

const (
	StateAL State = "AL"
	StateAK State = "AK"
	StateAZ State = "AZ"
	StateAR State = "AR"
	StateCA State = "CA"
	StateCO State = "CO"
	StateCT State = "CT"
	StateDE State = "DE"
	StateFL State = "FL"
	StateGA State = "GA"
	StateHI State = "HI"
	StateID State = "ID"
	StateIL State = "IL"
	StateIN State = "IN"
	StateIA State = "IA"
	StateKS State = "KS"
	StateKY State = "KY"
	StateLA State = "LA"
	StateME State = "ME"
	StateMD State = "MD"
	StateMA State = "MA"
	StateMI State = "MI"
	StateMN State = "MN"
	StateMS State = "MS"
	StateMO State = "MO"
	StateMT State = "MT"
	StateNE State = "NE"
	StateNV State = "NV"
	StateNH State = "NH"
	StateNJ State = "NJ"
	StateNM State = "NM"
	StateNY State = "NY"
	StateNC State = "NC"
	StateND State = "ND"
	StateOH State = "OH"
	StateOK State = "OK"
	StateOR State = "OR"
	StatePA State = "PA"
	StateRI State = "RI"
	StateSC State = "SC"
	StateSD State = "SD"
	StateTN State = "TN"
	StateTX State = "TX"
	StateUT State = "UT"
	StateVT State = "VT"
	StateVA State = "VA"
	StateWA State = "WA"
	StateWV State = "WV"
	StateWI State = "WI"
	StateWY State = "WY"
)

func (e *State) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = State(s)
	case string:
		*e = State(s)
	default:
		return fmt.Errorf("unsupported scan type for State: %T", src)
	}
	return nil
}

type TradeSide string

const (
	TradeSideBUY  TradeSide = "BUY"
	TradeSideSELL TradeSide = "SELL"
)

func (e *TradeSide) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TradeSide(s)
	case string:
		*e = TradeSide(s)
	default:
		return fmt.Errorf("unsupported scan type for TradeSide: %T", src)
	}
	return nil
}

type TradeStatus string

const (
	TradeStatusSUBMITTED TradeStatus = "SUBMITTED"
	TradeStatusCANCELLED TradeStatus = "CANCELLED"
	TradeStatusCOMPLETED TradeStatus = "COMPLETED"
	TradeStatusFAILED    TradeStatus = "FAILED"
)

func (e *TradeStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TradeStatus(s)
	case string:
		*e = TradeStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TradeStatus: %T", src)
	}
	return nil
}

type Account struct {
	AccountUuid uuid.UUID      `json:"account_uuid"`
	Username    string         `json:"username"`
	Email       string         `json:"email"`
	CreatedDate sql.NullTime   `json:"created_date"`
	UpdatedDate sql.NullTime   `json:"updated_date"`
	CreatedBy   sql.NullString `json:"created_by"`
	UpdatedBy   sql.NullString `json:"updated_by"`
}

type Address struct {
	AddressUuid uuid.UUID      `json:"address_uuid"`
	Name        string         `json:"name"`
	Street      string         `json:"street"`
	City        string         `json:"city"`
	State       State          `json:"state"`
	Zipcode     string         `json:"zipcode"`
	AccountUuid uuid.UUID      `json:"account_uuid"`
	CreatedDate sql.NullTime   `json:"created_date"`
	UpdatedDate sql.NullTime   `json:"updated_date"`
	CreatedBy   sql.NullString `json:"created_by"`
	UpdatedBy   sql.NullString `json:"updated_by"`
}

type Trade struct {
	TradeUuid   uuid.UUID      `json:"trade_uuid"`
	AccountUuid uuid.UUID      `json:"account_uuid"`
	Symbol      string         `json:"symbol"`
	Quantity    int64          `json:"quantity"`
	Side        TradeSide      `json:"side"`
	Price       float64        `json:"price"`
	Status      TradeStatus    `json:"status"`
	CreatedDate sql.NullTime   `json:"created_date"`
	UpdatedDate sql.NullTime   `json:"updated_date"`
	CreatedBy   sql.NullString `json:"created_by"`
	UpdatedBy   sql.NullString `json:"updated_by"`
}
