// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/valverdethiago/trading-api/db/sqlc (interfaces: Querier)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/valverdethiago/trading-api/db/sqlc"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockQuerier) CreateAccount(arg0 context.Context, arg1 db.CreateAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockQuerierMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockQuerier)(nil).CreateAccount), arg0, arg1)
}

// CreateAddress mocks base method.
func (m *MockQuerier) CreateAddress(arg0 context.Context, arg1 db.CreateAddressParams) (db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", arg0, arg1)
	ret0, _ := ret[0].(db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockQuerierMockRecorder) CreateAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockQuerier)(nil).CreateAddress), arg0, arg1)
}

// CreateTrade mocks base method.
func (m *MockQuerier) CreateTrade(arg0 context.Context, arg1 db.CreateTradeParams) (db.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrade", arg0, arg1)
	ret0, _ := ret[0].(db.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrade indicates an expected call of CreateTrade.
func (mr *MockQuerierMockRecorder) CreateTrade(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrade", reflect.TypeOf((*MockQuerier)(nil).CreateTrade), arg0, arg1)
}

// DeleteAddressFromAccount mocks base method.
func (m *MockQuerier) DeleteAddressFromAccount(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddressFromAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddressFromAccount indicates an expected call of DeleteAddressFromAccount.
func (mr *MockQuerierMockRecorder) DeleteAddressFromAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddressFromAccount", reflect.TypeOf((*MockQuerier)(nil).DeleteAddressFromAccount), arg0, arg1)
}

// GetAccountById mocks base method.
func (m *MockQuerier) GetAccountById(arg0 context.Context, arg1 uuid.UUID) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountById", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountById indicates an expected call of GetAccountById.
func (mr *MockQuerierMockRecorder) GetAccountById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountById", reflect.TypeOf((*MockQuerier)(nil).GetAccountById), arg0, arg1)
}

// GetAccountByUsername mocks base method.
func (m *MockQuerier) GetAccountByUsername(arg0 context.Context, arg1 string) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByUsername indicates an expected call of GetAccountByUsername.
func (mr *MockQuerierMockRecorder) GetAccountByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByUsername", reflect.TypeOf((*MockQuerier)(nil).GetAccountByUsername), arg0, arg1)
}

// GetAddressByAccount mocks base method.
func (m *MockQuerier) GetAddressByAccount(arg0 context.Context, arg1 uuid.UUID) (db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByAccount indicates an expected call of GetAddressByAccount.
func (mr *MockQuerierMockRecorder) GetAddressByAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByAccount", reflect.TypeOf((*MockQuerier)(nil).GetAddressByAccount), arg0, arg1)
}

// GetAddressById mocks base method.
func (m *MockQuerier) GetAddressById(arg0 context.Context, arg1 uuid.UUID) (db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressById", arg0, arg1)
	ret0, _ := ret[0].(db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressById indicates an expected call of GetAddressById.
func (mr *MockQuerierMockRecorder) GetAddressById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressById", reflect.TypeOf((*MockQuerier)(nil).GetAddressById), arg0, arg1)
}

// GetTradeById mocks base method.
func (m *MockQuerier) GetTradeById(arg0 context.Context, arg1 uuid.UUID) (db.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeById", arg0, arg1)
	ret0, _ := ret[0].(db.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradeById indicates an expected call of GetTradeById.
func (mr *MockQuerierMockRecorder) GetTradeById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeById", reflect.TypeOf((*MockQuerier)(nil).GetTradeById), arg0, arg1)
}

// ListAccounts mocks base method.
func (m *MockQuerier) ListAccounts(arg0 context.Context) ([]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0)
	ret0, _ := ret[0].([]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockQuerierMockRecorder) ListAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockQuerier)(nil).ListAccounts), arg0)
}

// ListTradesByAccount mocks base method.
func (m *MockQuerier) ListTradesByAccount(arg0 context.Context, arg1 uuid.UUID) ([]db.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTradesByAccount", arg0, arg1)
	ret0, _ := ret[0].([]db.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTradesByAccount indicates an expected call of ListTradesByAccount.
func (mr *MockQuerierMockRecorder) ListTradesByAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTradesByAccount", reflect.TypeOf((*MockQuerier)(nil).ListTradesByAccount), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockQuerier) UpdateAccount(arg0 context.Context, arg1 db.UpdateAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockQuerierMockRecorder) UpdateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockQuerier)(nil).UpdateAccount), arg0, arg1)
}

// UpdateAddress mocks base method.
func (m *MockQuerier) UpdateAddress(arg0 context.Context, arg1 db.UpdateAddressParams) (db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", arg0, arg1)
	ret0, _ := ret[0].(db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockQuerierMockRecorder) UpdateAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockQuerier)(nil).UpdateAddress), arg0, arg1)
}

// UpdateTrade mocks base method.
func (m *MockQuerier) UpdateTrade(arg0 context.Context, arg1 db.UpdateTradeParams) (db.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrade", arg0, arg1)
	ret0, _ := ret[0].(db.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrade indicates an expected call of UpdateTrade.
func (mr *MockQuerierMockRecorder) UpdateTrade(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrade", reflect.TypeOf((*MockQuerier)(nil).UpdateTrade), arg0, arg1)
}

// UpdateTradeStatus mocks base method.
func (m *MockQuerier) UpdateTradeStatus(arg0 context.Context, arg1 db.UpdateTradeStatusParams) (db.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTradeStatus", arg0, arg1)
	ret0, _ := ret[0].(db.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTradeStatus indicates an expected call of UpdateTradeStatus.
func (mr *MockQuerierMockRecorder) UpdateTradeStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTradeStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateTradeStatus), arg0, arg1)
}
